/*
===========================================================================

Copyright (c) 2010-2012 Darkstar Dev Teams

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/

This file is part of DarkStar-server source code.

===========================================================================
*/


#include "../../common/socket.h"

#include "lobby_a1_reserve.h"
#include "../login.h"

//Packet type 0x20, response to client packet 0xA1
CLobbyA1ReservePacket::CLobbyA1ReservePacket()
{
    this->setType(0x20);
    this->setSize(0x1c4);
    memcpy(data + 0x3C, login_config.servername, dsp_cap(strlen(login_config.servername), 0, 15));

    uint8 inData[] = { \
        0xc4, 0x01, 0x00, 0x00, 0x49, 0x58, 0x46, 0x46, 0x20, 0x00, 0x00, 0x00, 0x2a, 0x72, 0x4a, 0x94, \
        0x4f, 0x60, 0x27, 0xc4, 0x45, 0x4b, 0x7d, 0xcf, 0x27, 0x8e, 0x6d, 0xcd, 0x03, 0x00, 0x00, 0x00, \
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, \
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x61, 0x6c, 0x65, 0x00, 0x00, 0x00, 0x00, \
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x00, \
        0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x10, 0x00, 0x20, 0x00, 0x30, \
        0x00, 0x40, 0x00, 0x50, 0x00, 0x60, 0x00, 0x70, 0x00, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, \
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb5, 0xfa, 0x01, 0x00, \
        0x7e, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, \
        0x01, 0x01, 0x01, 0x01, 0x46, 0x6e, 0xcf, 0x09, 0xde, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
        0x0a, 0x52, 0x03, 0x00, 0x0e, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00							\
    };//    0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    const uint8 arr_0Cto1C_unknown[] = { \
        0x2A, 0x72, 0x4A, 0x94, 0x4F, 0x60, 0x27, 0xC4, 0x45, 0x4B, 0x7D, 0xCF, 0x27, 0x8E, 0x6D, 0xCD, 0x03 \
    };
    memcpy(data + 0x0C, arr_0Cto1C_unknown, sizeof(arr_0Cto1C_unknown));
    
    WBUFB(data, 0x22) = 0x01; WBUFB(data, 0x28) = 0x01; WBUFB(data, 0x2C) = 0x20; 
    const uint8 serverAbbreviation[] = { \
        0x56, 0x61, 0x6C, 0x65
    };
    memcpy(data + 0x38, serverAbbreviation, 4);
    WBUFB(data, 0x38) = 0x56; WBUFB(data, 0x39) = 0x61; WBUFB(data, 0x3A) = 0x6C; WBUFB(data, 0x3B) = 0x65;
    //0x38-3B Vale... Server abbrev?
    //memcpy(data+0x38,(const int8*)login_config.serverabbrev,dsp_cap(strlen(login_config.serverabbrev),0,4));
    WBUFB(data, 0x4C) = 0x02; WBUFB(data, 0x4E) = 0x05; WBUFB(data, 0x50) = 0x07; WBUFB(data, 0x52) = 0x01;
    WBUFW(data, 0x58) = 0x020E;
    WBUFB(data, 0x5B) = 0x10; WBUFB(data, 0x5D) = 0x20; WBUFB(data, 0x5F) = 0x30; WBUFB(data, 0x61) = 0x40; 
    WBUFB(data, 0x63) = 0x50; WBUFB(data, 0x65) = 0x60; WBUFB(data, 0x67) = 0x70; 
    WBUFB(data, 0x69) = 0x01; WBUFB(data, 0x6A) = 0x01; WBUFB(data, 0x6C) = 0x02;
    WBUFB(data, 0x71) = 0x01; WBUFB(data, 0x76) = 0x64; WBUFB(data, 0x7C) = 0xB5; WBUFB(data, 0x7D) = 0xFA;
    WBUFB(data, 0x7E) = 0x01; WBUFB(data, 0x80) = 0x7E; 
    const uint8 arr_84to93_unknown[] = { \
        0x01, 0x01, 0x01, 0x01, \
        0x01, 0x01, 0x01, 0x01, \
        0x01, 0x01, 0x01, 0x01, \
        0x01, 0x01, 0x01, 0x01 \
    };
    memcpy(data + 0x84, arr_84to93_unknown, sizeof(arr_84to93_unknown));

    WBUFB(data, 0x94) = 0x46; WBUFB(data, 0x95) = 0x6E; WBUFB(data, 0x96) = 0xCF; WBUFB(data, 0x97) = 0x09;
    WBUFB(data, 0x98) = 0xDE; WBUFB(data, 0x99) = 0x17; WBUFB(data, 0xA0) = 0x0A; WBUFB(data, 0xA1) = 0x52;
    WBUFB(data, 0xA2) = 0x03; WBUFB(data, 0xA4) = 0x0E; WBUFB(data, 0xA5) = 0x08; WBUFB(data, 0xA9) = 0x0F;




}